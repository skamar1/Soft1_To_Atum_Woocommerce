@page "/stores"
@rendermode InteractiveServer
@inject SyncApiClient SyncApi
@inject ISnackbar Snackbar
@using Soft1_To_Atum.Data.Models

<PageTitle>Stores - SoftOne to ATUM Sync</PageTitle>

<MudText Typo="Typo.h3" Class="mb-4">Store Management</MudText>
<MudText Typo="Typo.body1" Class="mb-6" Color="Color.Secondary">
    Manage WooCommerce stores and their synchronization settings
</MudText>

<MudCard>
    <MudCardContent>
        @if (stores == null)
        {
            <div class="d-flex justify-center align-center" style="height: 200px;">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.h6" Class="ml-4">Loading stores...</MudText>
            </div>
        }
        else if (!stores.Any())
        {
            <div class="text-center py-8">
                <MudIcon Icon="@Icons.Material.Filled.Store" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                <MudText Typo="Typo.h6" Color="Color.Secondary">No stores configured</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                    Add your first WooCommerce store to start synchronizing products
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">
                    Add Store
                </MudButton>
            </div>
        }
        else
        {
            <MudGrid>
                @foreach (var store in stores)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Elevation="4" Class="mb-4">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">@store.Name</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudChip T="string" Color="@(store.IsActive ? Color.Success : Color.Default)" Size="Size.Small">
                                        @(store.IsActive ? "Active" : "Inactive")
                                    </MudChip>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudStack Spacing="2">
                                    <div>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">URL</MudText>
                                        <MudText Typo="Typo.body2">@store.WooCommerceUrl</MudText>
                                    </div>
                                    <div>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">Last Sync</MudText>
                                        <MudText Typo="Typo.body2">
                                            @(store.LastSyncAt?.ToString("dd/MM/yyyy HH:mm") ?? "Never")
                                        </MudText>
                                    </div>
                                    <div>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">Created</MudText>
                                        <MudText Typo="Typo.body2">@store.CreatedAt.ToString("dd/MM/yyyy")</MudText>
                                    </div>
                                </MudStack>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small">
                                    Edit
                                </MudButton>
                                <MudButton StartIcon="@Icons.Material.Filled.Sync" Size="Size.Small" Color="Color.Primary">
                                    Test Connection
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }
    </MudCardContent>
</MudCard>

@code {
    private List<StoreResponse>? stores;

    protected override async Task OnInitializedAsync()
    {
        await LoadStores();
    }

    private async Task LoadStores()
    {
        try
        {
            stores = await SyncApi.GetStoresAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading stores: {ex.Message}", Severity.Error);
        }
    }
}