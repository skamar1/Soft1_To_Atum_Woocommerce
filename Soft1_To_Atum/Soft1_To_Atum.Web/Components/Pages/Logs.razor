@page "/logs"
@rendermode InteractiveServer
@inject SyncApiClient SyncApi
@inject ISnackbar Snackbar
@using Soft1_To_Atum.Data.Models

<PageTitle>Sync Logs - SoftOne to ATUM Sync</PageTitle>

<MudText Typo="Typo.h3" Class="mb-4">Synchronization Logs</MudText>
<MudText Typo="Typo.body1" Class="mb-6" Color="Color.Secondary">
    View historical synchronization logs and performance metrics
</MudText>

<MudCard>
    <MudCardContent>
        @if (logs == null)
        {
            <div class="d-flex justify-center align-center" style="height: 200px;">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.h6" Class="ml-4">Loading sync logs...</MudText>
            </div>
        }
        else
        {
            <MudDataGrid Items="@logs" Filterable="true" SortMode="@SortMode.Multiple" Groupable="false">
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="ID" />
                    <PropertyColumn Property="x => x.StartedAt" Title="Started" Format="dd/MM/yyyy HH:mm:ss" />
                    <PropertyColumn Property="x => x.CompletedAt" Title="Completed" Format="dd/MM/yyyy HH:mm:ss" />
                    <TemplateColumn Title="Duration">
                        <CellTemplate>
                            @if (context.Item.CompletedAt.HasValue)
                            {
                                var duration = context.Item.CompletedAt.Value - context.Item.StartedAt;
                                <MudText>@duration.ToString(@"hh\:mm\:ss")</MudText>
                            }
                            else
                            {
                                <MudText>-</MudText>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Status">
                        <CellTemplate>
                            <MudChip Color="@GetStatusColor(context.Item.Status)" Size="Size.Small">
                                @context.Item.Status
                            </MudChip>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.TotalProducts" Title="Total" />
                    <PropertyColumn Property="x => x.CreatedProducts" Title="Created" />
                    <PropertyColumn Property="x => x.UpdatedProducts" Title="Updated" />
                    <PropertyColumn Property="x => x.SkippedProducts" Title="Skipped" />
                    <PropertyColumn Property="x => x.ErrorCount" Title="Errors" />
                    <TemplateColumn Title="Actions">
                        <CellTemplate>
                            @if (!string.IsNullOrEmpty(context.Item.ErrorDetails))
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Error"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(() => ShowErrorDetails(context.Item))" />
                            }
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="SyncLogResponse" />
                </PagerContent>
            </MudDataGrid>
        }
    </MudCardContent>
</MudCard>

<MudDialog @bind-IsVisible="showErrorDialog">
    <DialogContent>
        <MudContainer Style="max-height: 300px; overflow-y: auto;">
            <MudText Typo="Typo.h6" Class="mb-3">Error Details - Sync ID: @selectedLog?.Id</MudText>
            <MudText Typo="Typo.body2" Style="white-space: pre-wrap;">@selectedLog?.ErrorDetails</MudText>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => showErrorDialog = false)" Color="Color.Primary">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<SyncLogResponse>? logs;
    private bool showErrorDialog = false;
    private SyncLogResponse? selectedLog;

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        try
        {
            logs = await SyncApi.GetSyncLogsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading sync logs: {ex.Message}", Severity.Error);
        }
    }

    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "Completed" => Color.Success,
            "Failed" => Color.Error,
            "Running" => Color.Info,
            _ => Color.Default
        };
    }

    private void ShowErrorDetails(SyncLogResponse log)
    {
        selectedLog = log;
        showErrorDialog = true;
    }
}