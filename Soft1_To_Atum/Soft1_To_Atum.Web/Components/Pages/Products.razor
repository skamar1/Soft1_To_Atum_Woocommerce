@page "/products"
@rendermode InteractiveServer
@inject SyncApiClient SyncApi
@inject ISnackbar Snackbar
@using Soft1_To_Atum.Data.Models

<PageTitle>Products - SoftOne to ATUM Sync</PageTitle>

<MudText Typo="Typo.h3" Class="mb-4">Product Management</MudText>
<MudText Typo="Typo.body1" Class="mb-6" Color="Color.Secondary">
    View and manage synchronized products between SoftOne Go and WooCommerce ATUM
</MudText>

<MudCard>
    <MudCardContent>
        @if (products == null)
        {
            <div class="d-flex justify-center align-center" style="height: 200px;">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.h6" Class="ml-4">Loading products...</MudText>
            </div>
        }
        else
        {
            <MudDataGrid Items="@products.Products" Filterable="true" SortMode="@SortMode.Multiple" Groupable="false">
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="ID" />
                    <PropertyColumn Property="x => x.Name" Title="Name" />
                    <PropertyColumn Property="x => x.Sku" Title="SKU" />
                    <PropertyColumn Property="x => x.Price" Title="Price" Format="C2" />
                    <PropertyColumn Property="x => x.Quantity" Title="Quantity" />
                    <PropertyColumn Property="x => x.LastSyncedAt" Title="Last Synced" Format="dd/MM/yyyy HH:mm" />
                    <TemplateColumn Title="Status">
                        <CellTemplate>
                            <MudChip Color="@GetSyncStatusColor(context.Item.LastSyncStatus)" Size="Size.Small">
                                @context.Item.LastSyncStatus
                            </MudChip>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="ProductResponse" />
                </PagerContent>
            </MudDataGrid>

            @if (products.TotalPages > 1)
            {
                <div class="d-flex justify-center mt-4">
                    <MudPagination Count="products.TotalPages" @bind-Selected="currentPage" ShowFirstButton="true" ShowLastButton="true" />
                </div>
            }
        }
    </MudCardContent>
</MudCard>

@code {
    private ProductsPageResponse? products;
    private int currentPage = 1;
    private const int pageSize = 25;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            products = await SyncApi.GetProductsAsync(currentPage, pageSize);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading products: {ex.Message}", Severity.Error);
        }
    }

    private Color GetSyncStatusColor(string status)
    {
        return status switch
        {
            "Success" => Color.Success,
            "Error" => Color.Error,
            "Skipped" => Color.Warning,
            _ => Color.Default
        };
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadProducts();
    }
}