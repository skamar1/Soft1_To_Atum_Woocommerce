using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using Soft1_To_Atum.ApiService.Extensions;
using Soft1_To_Atum.Data;
using Soft1_To_Atum.Data.Models;
using Soft1_To_Atum.Data.Services;
using System.Text;
using System.Text.Json;

var builder = WebApplication.CreateBuilder(args);

builder.AddServiceDefaults();
builder.Services.AddDbContext<SyncDbContext>(options =>
    options.UseSqlite("Data Source=sync.db"));

// Add services
builder.Services.AddScoped<SettingsService>();
builder.Services.AddScoped<SoftOneApiService>();
builder.Services.AddScoped<EmailService>();
builder.Services.AddScoped<IWooCommerceAtumClient, WooCommerceAtumClient>();
builder.Services.AddHttpClient();

builder.Services.AddProblemDetails();
builder.Services.AddOpenApi();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new() {
        Title = "SoftOne to ATUM Sync API",
        Version = "v1",
        Description = "API for synchronizing products between SoftOne Go and WooCommerce ATUM"
    });
});

var app = builder.Build();

// Initialize database in background to avoid blocking startup
_ = Task.Run(async () =>
{
    try
    {
        using var scope = app.Services.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<SyncDbContext>();
        var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();

        logger.LogInformation("Starting database initialization...");

        // Ensure database exists first
        await dbContext.Database.EnsureCreatedAsync();
        
        // Use the SettingsService to handle AppSettings initialization
        var settingsService = scope.ServiceProvider.GetRequiredService<SettingsService>();
        await settingsService.GetAppSettingsAsync(); // This will create default settings if they don't exist

        // Ensure there's at least one active Store
        var existingStore = await dbContext.Stores.FirstOrDefaultAsync(s => s.IsActive);
        if (existingStore == null)
        {
            logger.LogInformation("No active store found, creating default store...");

            var defaultStore = new Store
            {
                Name = "Κατάστημα Κέντρο",
                WooCommerceUrl = "https://your-woocommerce-site.com",
                WooCommerceKey = "ck_your_consumer_key",
                WooCommerceSecret = "cs_your_consumer_secret",
                IsActive = true,
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            dbContext.Stores.Add(defaultStore);
            await dbContext.SaveChangesAsync();

            logger.LogInformation("Default store created with ID: {StoreId}", defaultStore.Id);
        }

        logger.LogInformation("Database initialization completed successfully");
    }
    catch (Exception ex)
    {
        // Log the error but don't crash the application
        using var scope = app.Services.CreateScope();
        var logger = scope.ServiceProvider.GetRequiredService<ILogger<Program>>();
        logger.LogError(ex, "Error during database initialization: {Message}", ex.Message);
    }
});

app.UseExceptionHandler();

if (app.Environment.IsDevelopment())
{
    app.MapOpenApi();
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "SoftOne to ATUM Sync API v1");
        c.RoutePrefix = "swagger";
    });
}

app.MapGet("/health", () => "Healthy")
.WithTags("Health")
.WithSummary("Health check endpoint");

app.MapGet("/debug/test", () => new { message = "API is working", timestamp = DateTime.UtcNow })
.WithTags("Debug")
.WithSummary("Simple test endpoint");

// API endpoint groups
var syncGroup = app.MapGroup("/api/sync")
    .WithTags("Sync")
    .WithOpenApi();

var productsGroup = app.MapGroup("/api/products")
    .WithTags("Products")
    .WithOpenApi();

var storesGroup = app.MapGroup("/api/stores")
    .WithTags("Stores")
    .WithOpenApi();

var settingsGroup = app.MapGroup("/api/settings")
    .WithTags("Settings")
    .WithOpenApi();

syncGroup.MapGet("/logs", async (SyncDbContext db) =>
{
    var logs = await db.SyncLogs
        .OrderByDescending(l => l.StartedAt)
        .Take(50)
        .ToListAsync();
    return Results.Ok(logs);
})
.WithName("GetSyncLogs")
.WithSummary("Get the latest 50 sync logs")
.WithDescription("Retrieves the 50 most recent synchronization logs");

syncGroup.MapGet("/logs/{id:int}", async (int id, SyncDbContext db) =>
{
    var log = await db.SyncLogs.FindAsync(id);
    return log != null ? Results.Ok(log) : Results.NotFound();
})
.WithName("GetSyncLog")
.WithSummary("Get a specific sync log by ID")
.WithDescription("Retrieves a synchronization log by its unique identifier");

syncGroup.MapGet("/status", async (SyncDbContext db) =>
{
    var lastSync = await db.SyncLogs
        .OrderByDescending(l => l.StartedAt)
        .FirstOrDefaultAsync();

    var isRunning = lastSync?.Status == "Running";
    var totalProducts = await db.Products.CountAsync();

    var stats = new
    {
        IsRunning = isRunning,
        LastSyncAt = lastSync?.StartedAt,
        LastSyncStatus = lastSync?.Status,
        LastSyncDuration = lastSync?.Duration?.ToString(@"hh\:mm\:ss"),
        TotalProducts = totalProducts,
        LastSyncStats = lastSync != null ? new
        {
            Total = lastSync.TotalProducts,
            Created = lastSync.CreatedProducts,
            Updated = lastSync.UpdatedProducts,
            Skipped = lastSync.SkippedProducts,
            Errors = lastSync.ErrorCount
        } : null
    };

    return Results.Ok(stats);
})
.WithName("GetSyncStatus")
.WithSummary("Get current sync status and statistics")
.WithDescription("Retrieves the current synchronization status, last sync information, and product statistics");

productsGroup.MapGet("/", async (SyncDbContext db, int page = 1, int pageSize = 50) =>
{
    var products = await db.Products
        .OrderByDescending(p => p.LastSyncedAt)
        .Skip((page - 1) * pageSize)
        .Take(pageSize)
        .ToListAsync();

    var total = await db.Products.CountAsync();

    return Results.Ok(new
    {
        Products = products,
        Page = page,
        PageSize = pageSize,
        Total = total,
        TotalPages = (int)Math.Ceiling((double)total / pageSize)
    });
})
.WithName("GetProducts")
.WithSummary("Get paginated list of synchronized products")
.WithDescription("Retrieves a paginated list of products that have been synchronized from SoftOne Go");

productsGroup.MapGet("/{id:int}", async (int id, SyncDbContext db) =>
{
    var product = await db.Products.FindAsync(id);
    return product != null ? Results.Ok(product) : Results.NotFound();
})
.WithName("GetProduct")
.WithSummary("Get a specific product by ID")
.WithDescription("Retrieves detailed information about a specific product");

storesGroup.MapGet("/", async (SyncDbContext db) =>
{
    var stores = await db.Stores
        .Where(s => s.IsActive)
        .Select(s => new
        {
            s.Id,
            s.Name,
            s.WooCommerceUrl,
            s.IsActive,
            s.LastSyncAt,
            s.CreatedAt
        })
        .ToListAsync();

    return Results.Ok(stores);
})
.WithName("GetStores")
.WithSummary("Get list of active stores")
.WithDescription("Retrieves all active WooCommerce stores configured for synchronization");

syncGroup.MapPost("/manual", async (SyncDbContext db, SettingsService settingsService, SoftOneApiService softOneApiService, IWooCommerceAtumClient wooCommerceClient, EmailService emailService, ILogger<Program> logger, CancellationToken cancellationToken) =>
{
    Console.WriteLine("\n\nManual sync endpoint called\n\n");
    logger.LogInformation("===== MANUAL SYNC ENDPOINT CALLED =====");
    logger.LogInformation("Manual sync requested at {time}", DateTime.UtcNow);

    //get settings from database
    var settings = await settingsService.GetAppSettingsAsync();

    // Check if settings are valid
    if (settings == null)
    {
        logger.LogError("Failed to retrieve settings");
        return Results.Problem("Failed to retrieve settings");
    }

    //deserialize to api model for easier handling
    var apiSettings = settings.ToApiModel();

    var client = new HttpClient();
    var request = new HttpRequestMessage(HttpMethod.Post, $"{apiSettings.SoftOneGo.BaseUrl}/list/item");
    request.Headers.Add("s1code", apiSettings.SoftOneGo.S1Code);
    var content = new StringContent($"{{\n    \"appId\": \"703\",\n    \"filters\": \"ITEM.MTRL_ITEMTRDATA_QTY1=1&ITEM.MTRL_ITEMTRDATA_QTY1_TO=9999\",\n    \"token\": \"{apiSettings.SoftOneGo.Token}\"\n}}", null, "application/json");
    request.Content = content;

    Console.WriteLine("Sending request to SoftOne Go API...");

    var response = await client.SendAsync(request);
    response.EnsureSuccessStatusCode();


    // Register encoding provider for Windows-1253
    Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);
    
    // Check if response is compressed and handle accordingly
    string responseContent;
    var contentEncoding = response.Content.Headers.ContentEncoding;
    
    if (contentEncoding.Contains("gzip"))
    {
        // Handle gzip compressed response
        using var responseStream = await response.Content.ReadAsStreamAsync();
        using var gzipStream = new System.IO.Compression.GZipStream(responseStream, System.IO.Compression.CompressionMode.Decompress);
        using var reader = new StreamReader(gzipStream, Encoding.GetEncoding("windows-1253"));
        responseContent = await reader.ReadToEndAsync();
    }
    else
    {
        // Handle uncompressed response with Windows-1253 encoding
        var responseBytes = await response.Content.ReadAsByteArrayAsync();
        var encoding = Encoding.GetEncoding("windows-1253");
        responseContent = encoding.GetString(responseBytes);
    }

    Console.WriteLine("Received response from SoftOne Go API...");

    try
    {
        var softOneResponse = JsonSerializer.Deserialize<LocalSoftOneApiResponse>(responseContent, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        });

        if (softOneResponse?.Success == true)
        {
            Console.WriteLine($"SoftOne API Success! Total Products: {softOneResponse.TotalCount}");
            Console.WriteLine($"Update Date: {softOneResponse.UpdateDate}");
            Console.WriteLine($"Request ID: {softOneResponse.RequestId}");
            
            // Convert to structured products
            var products = softOneResponse.GetProducts();
            Console.WriteLine($"Successfully parsed {products.Count} products");
            
            // Display first few products for debugging
            foreach (var product in products.Take(5))
            {
                Console.WriteLine($"Product: {product.Name} | Code: {product.Code} | Price: €{product.RetailPrice} | Stock: {product.StockQuantity}");
            }
            
            // TODO: Process products for WooCommerce synchronization
            logger.LogInformation("Retrieved {ProductCount} products from SoftOne Go API", products.Count);
        }
        else
        {
            Console.WriteLine("SoftOne API call was not successful");
            logger.LogWarning("SoftOne API returned success=false");
            return Results.Problem("SoftOne API returned unsuccessful response");
        }
    }
    catch (JsonException jsonEx)
    {
        logger.LogError(jsonEx, "Error deserializing SoftOne response: {Message}", jsonEx.Message);
        Console.WriteLine($"Error deserializing SoftOne response: {jsonEx.Message}");
        Console.WriteLine("Raw response content for debugging:");
        Console.WriteLine(responseContent.Substring(0, Math.Min(500, responseContent.Length)));
        return Results.Problem("Error deserializing SoftOne response");
    }
    catch (Exception ex)
    {
        logger.LogError(ex, "Unexpected error processing SoftOne response: {Message}", ex.Message);
        Console.WriteLine($"Unexpected error processing SoftOne response: {ex.Message}");
        return Results.Problem("Unexpected error processing SoftOne response");
    }
    














    return null;








































   
})
.WithName("StartManualSync")
.WithSummary("Start a manual synchronization process")
.WithDescription("Initiates a manual synchronization of products from SoftOne Go to WooCommerce ATUM");

// Settings endpoints
settingsGroup.MapGet("/", async (SettingsService settingsService, ILogger<Program> logger) =>
{
    logger.LogDebug("Getting application settings from database");

    try
    {
        var appSettings = await settingsService.GetAppSettingsAsync();
        var settings = appSettings.ToApiModel();

        // Don't expose the actual password in the response
        settings.Email.Password = string.IsNullOrEmpty(appSettings.EmailPassword) ? "" : "***";

        logger.LogDebug("Successfully retrieved settings from database");
        return Results.Ok(settings);
    }
    catch (Exception ex)
    {
        logger.LogError(ex, "Error retrieving settings from database");
        return Results.Problem("Failed to retrieve settings");
    }
})
.WithName("GetSettings")
.WithSummary("Get current application settings")
.WithDescription("Retrieves the current configuration settings for all integrated services");

settingsGroup.MapPut("/", async (HttpContext context, SettingsService settingsService, ILogger<Program> logger) =>
{
    logger.LogDebug("Updating application settings in database");

    try
    {
        // Read the raw JSON first for debugging
        using var reader = new StreamReader(context.Request.Body);
        var rawJson = await reader.ReadToEndAsync();
        logger.LogDebug("Received raw JSON: {RawJson}", rawJson);

        // Deserialize manually with more control
        var settings = JsonSerializer.Deserialize<ApiSettingsModel>(rawJson, new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        });

        if (settings == null)
        {
            logger.LogError("Failed to deserialize settings from JSON");
            return Results.BadRequest("Invalid settings data");
        }

        logger.LogDebug("Successfully deserialized settings for store: {StoreName}", settings.Name);

        // Get existing settings from database
        var appSettings = await settingsService.GetAppSettingsAsync();

        // Update the settings with new values
        appSettings.UpdateFromApiModel(settings);

        // Save to database
        await settingsService.UpdateAppSettingsAsync(appSettings);

        logger.LogInformation("Settings updated successfully in database for store: {StoreName}", settings.Name);
        return Results.Ok(new { message = "Settings updated successfully" });
    }
    catch (JsonException ex)
    {
        logger.LogError(ex, "Error deserializing settings JSON: {Message}", ex.Message);
        return Results.BadRequest("Invalid JSON format");
    }
    catch (Exception ex)
    {
        logger.LogError(ex, "Error updating settings in database: {Message}", ex.Message);
        return Results.Problem("Failed to update settings");
    }
})
.WithName("UpdateSettings")
.WithSummary("Update application settings")
.WithDescription("Updates the configuration settings for integrated services");

settingsGroup.MapGet("/test/{service}", async (string service, SettingsService settingsService, SoftOneApiService softOneApiService, EmailService emailService, ILogger<Program> logger) =>
{
    logger.LogDebug("Testing connection for service: {Service}", service);

    try
    {
        // Get settings from database
        var appSettings = await settingsService.GetAppSettingsAsync();

        switch (service.ToLower())
        {
            case "softone":
                // Check if required fields are present
                if (string.IsNullOrEmpty(appSettings.SoftOneGoBaseUrl) ||
                    string.IsNullOrEmpty(appSettings.SoftOneGoToken) ||
                    string.IsNullOrEmpty(appSettings.SoftOneGoAppId) ||
                    string.IsNullOrEmpty(appSettings.SoftOneGoS1Code))
                {
                    logger.LogWarning("SoftOne connection test failed - missing configuration");
                    return Results.BadRequest(new { message = "SoftOne connection failed - missing configuration" });
                }

                // Test actual connection to SoftOne API
                logger.LogInformation("Testing actual SoftOne API connection...");
                var softOneResult = await softOneApiService.TestConnectionAsync(
                    appSettings.SoftOneGoBaseUrl,
                    appSettings.SoftOneGoAppId,
                    appSettings.SoftOneGoToken,
                    appSettings.SoftOneGoS1Code
                );

                if (softOneResult)
                {
                    logger.LogInformation("SoftOne API connection test successful");
                    return Results.Ok(new { message = "SoftOne connection successful" });
                }
                else
                {
                    logger.LogWarning("SoftOne API connection test failed");
                    return Results.BadRequest(new { message = "SoftOne connection failed - check credentials and network" });
                }

            case "woocommerce":
                // Simulate WooCommerce test (can be implemented later)
                await Task.Delay(500);
                var wooValid = !string.IsNullOrEmpty(appSettings.WooCommerceUrl) && !string.IsNullOrEmpty(appSettings.WooCommerceConsumerKey);
                if (wooValid)
                {
                    logger.LogInformation("WooCommerce connection test successful (simulated)");
                    return Results.Ok(new { message = "WooCommerce connection successful" });
                }
                else
                {
                    logger.LogWarning("WooCommerce connection test failed - missing configuration");
                    return Results.BadRequest(new { message = "WooCommerce connection failed - missing configuration" });
                }

            case "atum":
                // Simulate ATUM test (can be implemented later)
                await Task.Delay(500);
                var atumValid = appSettings.AtumLocationId > 0;
                if (atumValid)
                {
                    logger.LogInformation("ATUM connection test successful (simulated)");
                    return Results.Ok(new { message = "ATUM connection successful" });
                }
                else
                {
                    logger.LogWarning("ATUM connection test failed - missing configuration");
                    return Results.BadRequest(new { message = "ATUM connection failed - missing configuration" });
                }

            case "email":
                // Test email settings
                logger.LogInformation("Testing email configuration...");

                if (string.IsNullOrEmpty(appSettings.EmailSmtpHost) ||
                    string.IsNullOrEmpty(appSettings.EmailFromEmail) ||
                    string.IsNullOrEmpty(appSettings.EmailToEmail))
                {
                    logger.LogWarning("Email test failed - missing configuration");
                    return Results.BadRequest(new { message = "Email configuration incomplete - please fill in SMTP host, from email, and to email" });
                }

                try
                {
                    // Use the EmailService to send an actual test email
                    var emailResult = await emailService.TestEmailSettingsAsync(appSettings);

                    if (emailResult)
                    {
                        logger.LogInformation("Test email sent successfully to {ToEmail}", appSettings.EmailToEmail);
                        return Results.Ok(new { message = $"Test email sent successfully to {appSettings.EmailToEmail}" });
                    }
                    else
                    {
                        logger.LogWarning("Test email failed to send");
                        return Results.BadRequest(new { message = "Failed to send test email. Please check your SMTP settings." });
                    }
                }
                catch (Exception emailEx)
                {
                    logger.LogError(emailEx, "Email test failed: {Message}", emailEx.Message);
                    return Results.BadRequest(new { message = $"Email test failed: {emailEx.Message}" });
                }

            default:
                logger.LogWarning("Unknown service for connection test: {Service}", service);
                return Results.BadRequest(new { message = $"Unknown service: {service}" });
        }
    }
    catch (Exception ex)
    {
        logger.LogError(ex, "Error testing {Service} connection: {Message}", service, ex.Message);
        return Results.Problem($"Error testing {service} connection: {ex.Message}");
    }
})
.WithName("TestConnection")
.WithSummary("Test connection to external services")
.WithDescription("Tests the connection and authentication for the specified external service (softone, woocommerce, atum, email)");

app.MapDefaultEndpoints();

app.Run();
public class LocalSoftOneApiResponse
{
    [JsonPropertyName("success")]
    public bool Success { get; set; }
    
    [JsonPropertyName("upddate")]
    public string UpdateDate { get; set; } = string.Empty;
    
    [JsonPropertyName("reqID")]
    public string RequestId { get; set; } = string.Empty;
    
    [JsonPropertyName("totalcount")]
    public int TotalCount { get; set; }
    
    [JsonPropertyName("fields")]
    public List<LocalSoftOneFieldDefinition> Fields { get; set; } = [];
    
    [JsonPropertyName("rows")]
    public List<List<string?>> Rows { get; set; } = [];
    
    public List<LocalSoftOneProduct> GetProducts()
    {
        return Rows.Select(row => LocalSoftOneProduct.FromApiRow(row, Fields)).ToList();
    }
}

public class LocalSoftOneFieldDefinition
{
    [JsonPropertyName("name")]
    public string Name { get; set; } = string.Empty;
    
    [JsonPropertyName("type")]
    public string Type { get; set; } = string.Empty;
}

public class LocalSoftOneProduct
{
    public string ZoomInfo { get; set; } = string.Empty;
    public string ImageData { get; set; } = string.Empty;
    public string Code { get; set; } = string.Empty;
    public string Name { get; set; } = string.Empty;
    public string Category { get; set; } = string.Empty;
    public string Unit { get; set; } = string.Empty;
    public decimal? WholesalePrice { get; set; }
    public decimal? RetailPrice { get; set; }
    public string Group { get; set; } = string.Empty;
    public decimal? StockQuantity { get; set; }
    public string Vat { get; set; } = string.Empty;
    public decimal? Discount { get; set; }
    public string InternalId { get; set; } = string.Empty;
    public string Barcode { get; set; } = string.Empty;
    public decimal? SalePrice { get; set; }
    public decimal? PurchasePrice { get; set; }

    public static LocalSoftOneProduct FromApiRow(List<string?> row, List<LocalSoftOneFieldDefinition> fields)
    {
        var product = new LocalSoftOneProduct();

        for (int i = 0; i < fields.Count && i < row.Count; i++)
        {
            var fieldName = fields[i].Name;
            var value = row[i];

            switch (fieldName)
            {
                case "ZOOMINFO":
                    product.ZoomInfo = value ?? string.Empty;
                    break;
                case "ITEM.MTRL_ITEDOCDATA_SODATA":
                    product.ImageData = value ?? string.Empty;
                    break;
                case "ITEM.CODE":
                    product.Code = value ?? string.Empty;
                    break;
                case "ITEM.NAME":
                    product.Name = value ?? string.Empty;
                    break;
                case "ITEM.MTRCATEGORY":
                    product.Category = value ?? string.Empty;
                    break;
                case "ITEM.MTRUNIT1":
                    product.Unit = value ?? string.Empty;
                    break;
                case "ITEM.PRICEW":
                    if (decimal.TryParse(value, out var wholesale))
                        product.WholesalePrice = wholesale;
                    break;
                case "ITEM.PRICER":
                    if (decimal.TryParse(value, out var retail))
                        product.RetailPrice = retail;
                    break;
                case "ITEM.MTRGROUP":
                    product.Group = value ?? string.Empty;
                    break;
                case "ITEM.MTRL_ITEMTRDATA_QTY1":
                    if (decimal.TryParse(value, out var stock))
                        product.StockQuantity = stock;
                    break;
                case "ITEM.VAT":
                    product.Vat = value ?? string.Empty;
                    break;
                case "ITEM.SODISCOUNT":
                    if (decimal.TryParse(value, out var discount))
                        product.Discount = discount;
                    break;
                case "ITEM.MTRL":
                    product.InternalId = value ?? string.Empty;
                    break;
                case "ITEM.CODE1":
                    product.Barcode = value ?? string.Empty;
                    break;
                case "ITEM.MTRL_ITEMTRDATA_SALLPRICE":
                    if (decimal.TryParse(value, out var salePrice))
                        product.SalePrice = salePrice;
                    break;
                case "ITEM.MTRL_ITEMTRDATA_PURLPRICE":
                    if (decimal.TryParse(value, out var purchasePrice))
                        product.PurchasePrice = purchasePrice;
                    break;
            }
        }

        return product;
    }
}

// Helper method for processing products during manual sync
static async Task ProcessProductForManualSync(
    SoftOneProduct softOneProduct,
    int storeId,
    IWooCommerceAtumClient wooCommerceClient,
    SyncDbContext dbContext,
    AppSettings settings,
    SyncLog syncLog,
    CancellationToken cancellationToken)
{
    // Determine the SKU to use for matching
    var sku = GetProductSkuForManualSync(softOneProduct, settings);
    if (string.IsNullOrEmpty(sku))
    {
        syncLog.SkippedProducts++;
        return;
    }

    // Check if product exists in WooCommerce
    var existingProduct = await wooCommerceClient.GetProductBySkuAsync(storeId, sku, cancellationToken);

    if (existingProduct != null)
    {
        // Product exists - update if enabled
        if (settings.MatchingUpdateExistingProducts)
        {
            await UpdateExistingProductForManualSync(existingProduct, softOneProduct, storeId, wooCommerceClient, dbContext, settings, cancellationToken);
            syncLog.UpdatedProducts++;
        }
        else
        {
            syncLog.SkippedProducts++;
        }
    }
    else
    {
        // Product doesn't exist - create if enabled
        if (settings.MatchingCreateMissingProducts)
        {
            await CreateNewProductForManualSync(softOneProduct, storeId, wooCommerceClient, dbContext, settings, cancellationToken);
            syncLog.CreatedProducts++;
        }
        else
        {
            syncLog.SkippedProducts++;
        }
    }
}

static string GetProductSkuForManualSync(SoftOneProduct softOneProduct, AppSettings settings)
{
    // Use primary field first, then fallback to secondary
    var primaryValue = GetFieldValueForManualSync(softOneProduct, settings.MatchingPrimaryField);
    if (!string.IsNullOrEmpty(primaryValue))
        return primaryValue;

    var secondaryValue = GetFieldValueForManualSync(softOneProduct, settings.MatchingSecondaryField);
    return secondaryValue ?? string.Empty;
}

static string? GetFieldValueForManualSync(SoftOneProduct product, string fieldName)
{
    return fieldName.ToLower() switch
    {
        "sku" or "code" => product.Code,
        "barcode" => product.Barcode,
        "name" => product.Name,
        _ => null
    };
}

static async Task CreateNewProductForManualSync(
    SoftOneProduct softOneProduct,
    int storeId,
    IWooCommerceAtumClient wooCommerceClient,
    SyncDbContext dbContext,
    AppSettings settings,
    CancellationToken cancellationToken)
{
    var sku = GetProductSkuForManualSync(softOneProduct, settings);

    var createRequest = new CreateWooCommerceProductRequest
    {
        Name = softOneProduct.Name,
        Sku = sku,
        RegularPrice = softOneProduct.RetailPrice ?? 0,
        Description = $"Imported from SoftOne Go - Code: {softOneProduct.Code}",
        StockQuantity = (int)(softOneProduct.StockQuantity ?? 0),
        ManageStock = true
    };

    var createdProduct = await wooCommerceClient.CreateProductAsync(storeId, createRequest, cancellationToken);

    // Update ATUM inventory if location is configured
    if (settings.AtumLocationId > 0)
    {
        var inventoryRequest = new UpdateAtumInventoryRequest
        {
            Quantity = (int)(softOneProduct.StockQuantity ?? 0),
            Location = settings.AtumLocationName
        };
        await wooCommerceClient.UpdateAtumInventoryAsync(storeId, createdProduct.Id, inventoryRequest, cancellationToken);
    }

    // Save to local database
    var product = new Product
    {
        SoftOneId = softOneProduct.Code,
        WooCommerceId = createdProduct.Id.ToString(),
        AtumId = createdProduct.Id.ToString(),
        Name = createdProduct.Name,
        Sku = createdProduct.Sku,
        Price = createdProduct.RegularPrice,
        Quantity = createdProduct.StockQuantity,
        LastSyncedAt = DateTime.UtcNow,
        LastSyncStatus = "Created"
    };

    dbContext.Products.Add(product);
}

static async Task UpdateExistingProductForManualSync(
    WooCommerceProduct existingProduct,
    SoftOneProduct softOneProduct,
    int storeId,
    IWooCommerceAtumClient wooCommerceClient,
    SyncDbContext dbContext,
    AppSettings settings,
    CancellationToken cancellationToken)
{
    var updateRequest = new UpdateWooCommerceProductRequest
    {
        Name = softOneProduct.Name,
        RegularPrice = softOneProduct.RetailPrice ?? existingProduct.RegularPrice,
        StockQuantity = (int)(softOneProduct.StockQuantity ?? existingProduct.StockQuantity)
    };

    var updatedProduct = await wooCommerceClient.UpdateProductAsync(storeId, existingProduct.Id, updateRequest, cancellationToken);

    // Update ATUM inventory if location is configured
    if (settings.AtumLocationId > 0)
    {
        var inventoryRequest = new UpdateAtumInventoryRequest
        {
            Quantity = (int)(softOneProduct.StockQuantity ?? 0),
            Location = settings.AtumLocationName
        };
        await wooCommerceClient.UpdateAtumInventoryAsync(storeId, updatedProduct.Id, inventoryRequest, cancellationToken);
    }

    // Update local database
    var product = await dbContext.Products
        .FirstOrDefaultAsync(p => p.WooCommerceId == updatedProduct.Id.ToString(), cancellationToken);

    if (product != null)
    {
        product.Name = updatedProduct.Name;
        product.Price = updatedProduct.RegularPrice;
        product.Quantity = updatedProduct.StockQuantity;
        product.LastSyncedAt = DateTime.UtcNow;
        product.LastSyncStatus = "Updated";
    }
}
