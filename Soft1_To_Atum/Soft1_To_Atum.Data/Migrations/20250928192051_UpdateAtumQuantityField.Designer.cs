// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Soft1_To_Atum.Data;

#nullable disable

namespace Soft1_To_Atum.Data.Migrations
{
    [DbContext(typeof(SyncDbContext))]
    [Migration("20250928192051_UpdateAtumQuantityField")]
    partial class UpdateAtumQuantityField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Soft1_To_Atum.Data.Models.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AtumLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AtumLocationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailFromEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailSmtpHost")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("EmailSmtpPort")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailToEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailUsername")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldMappingCategory")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldMappingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldMappingPrice")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldMappingSku")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldMappingStockQuantity")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldMappingUnit")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FieldMappingVat")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("MatchingCreateMissingProducts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MatchingPrimaryField")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("MatchingSecondaryField")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("MatchingUpdateExistingProducts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SoftOneGoAppId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("SoftOneGoBaseUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("SoftOneGoFilters")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("SoftOneGoS1Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SoftOneGoToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("StoreEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("SyncAutoSync")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SyncEmailNotifications")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SyncIntervalMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("WooCommerceConsumerKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("WooCommerceConsumerSecret")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("WooCommerceUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("WooCommerceVersion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AtumLocationId = 870,
                            AtumLocationName = "store1_location",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 20, 51, 125, DateTimeKind.Utc).AddTicks(3880),
                            EmailFromEmail = "",
                            EmailPassword = "",
                            EmailSmtpHost = "",
                            EmailSmtpPort = 587,
                            EmailToEmail = "",
                            EmailUsername = "",
                            FieldMappingCategory = "ITEM.MTRCATEGORY",
                            FieldMappingName = "ITEM.NAME",
                            FieldMappingPrice = "ITEM.PRICER",
                            FieldMappingSku = "ITEM.CODE1",
                            FieldMappingStockQuantity = "ITEM.MTRL_ITEMTRDATA_QTY1",
                            FieldMappingUnit = "ITEM.MTRUNIT1",
                            FieldMappingVat = "ITEM.VAT",
                            MatchingCreateMissingProducts = true,
                            MatchingPrimaryField = "sku",
                            MatchingSecondaryField = "barcode",
                            MatchingUpdateExistingProducts = true,
                            SoftOneGoAppId = "703",
                            SoftOneGoBaseUrl = "https://go.s1cloud.net/s1services",
                            SoftOneGoFilters = "ITEM.MTRL_ITEMTRDATA_QTY1=1&ITEM.MTRL_ITEMTRDATA_QTY1_TO=9999",
                            SoftOneGoS1Code = "",
                            SoftOneGoToken = "",
                            StoreEnabled = true,
                            StoreName = "Κατάστημα Κέντρο",
                            SyncAutoSync = true,
                            SyncEmailNotifications = true,
                            SyncIntervalMinutes = 15,
                            UpdatedAt = new DateTime(2025, 9, 28, 19, 20, 51, 125, DateTimeKind.Utc).AddTicks(4010),
                            WooCommerceConsumerKey = "",
                            WooCommerceConsumerSecret = "",
                            WooCommerceUrl = "",
                            WooCommerceVersion = "wc/v3"
                        });
                });

            modelBuilder.Entity("Soft1_To_Atum.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AtumId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AtumQuantity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InternalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSyncError")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastSyncStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSyncedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SoftOneId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Vat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("WholesalePrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("WooCommerceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ZoomInfo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Sku");

                    b.HasIndex("SoftOneId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Soft1_To_Atum.Data.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSyncAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("WooCommerceKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("WooCommerceSecret")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("WooCommerceUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Soft1_To_Atum.Data.Models.SyncLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedProducts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ErrorCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorDetails")
                        .HasColumnType("TEXT");

                    b.Property<int>("SkippedProducts")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalProducts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpdatedProducts")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SyncLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
